
#include <LiquidCrystal.h>

 // initialize the library with the numbers of the interface pins
 LiquidCrystal lcd(7, 8, 9, 10, 11, 12);
 int ScoreplrA = 12;
   int ScoreplrB = 10;
   int SetplrA = 2;
   int SetplrB = 5;
   int ledPin = 5;
   int buttonApin = 9;
   int buttonBpin = 8;
   byte leds = 0;
   int totalSets=SetplrA +SetplrB;  //  counts the total sets
   int serverCount=0; //counts  the server who  serves
 
 
 void setup() {
   // set up the LCD's number of columns and rows:
    

    pinMode(ledPin, OUTPUT);
    pinMode(buttonApin, INPUT_PULLUP);  
    pinMode(buttonBpin, INPUT_PULLUP);  
    lcd.begin(16, 2);

      lcd.setCursor(0, 0);
     // Print game score.
      lcd.print("Score A:  - B: ");
     // Set Player A score.
     lcd.setCursor(8, 0);
     // inputs Player A Score to score board.
     lcd.print(ScoreplrA);
     // Sets player B score.
     lcd.setCursor(14,0);
     // inputs Player B Score to score board.
     lcd.print(ScoreplrB);
      lcd.setCursor(0, 2);
     // Print set score
     lcd.print("Set   A:  - B: ");
     // Set Player A set points.
     lcd.setCursor(8, 2);
     // inputs Player A Score to score board.
     lcd.print(SetplrA);
     // Sets player B set points.
     lcd.setCursor(14,2);
     // inputs Player B Score to score board.
     lcd.print(SetplrB);
     
   }
   void loop(){
        //loop to increase points
      if(ScoreplrA  <= 11 && ScoreplrB <=11){
              //IF BUTTON IS PUSHED, (A0 goes LOW) ADD 1 POINTS
              if (digitalRead(buttonApin) == LOW)
              {
                  ScoreplrA++;
                 digitalWrite(ledPin, HIGH);
                 // delay(500); this is optional
                
               }
               if (digitalRead(buttonBpin) == LOW)
               {
                  ScoreplrB++;
                 digitalWrite(ledPin, LOW); 
               }
        //check if playerA reached 11  points
       }else if(ScoreplrA  == 11){
          SetplrA++;
          totalSets++;
          
        
       }else if(ScoreplrB  == 11){
          SetplrB++;
          totalSets++;
       }
//  //check  if  players played  5  sets 
//       if(totalSets ==5){
//          //game is over
//        
//       }
//
//
//       //check if  server   served two times, now switch the LED for  the other  player to become the  server
//       if(){
//        
//       }
//       
  }
  


//
//void scoring() {
//  
//  if (!digitalRead(switchone)) {
//    
//    displayone++;  // Increase score by 1
//  
//    // convert whole number to single digits
//    rightdigit=displayone%10;
//    leftdigit=displayone%100/10;
//
//    // Display extracted digits on the display
//    lc.setDigit(0,0,leftdigit,false);
//    lc.setDigit(0,1,rightdigit,false);
//
//    
//    // Wait until switch is released to continue
//    while (!digitalRead(switchone)) { 
//    }
//    delay(5);  // Small delay to debounce the switch
//  }
//
//    if (!digitalRead(switchtwo)) {
//      
//    displaytwo++;
//  
//    rightdigit=displaytwo%10;
//    leftdigit=displaytwo%100/10;
//
//    lc.setDigit(0,2,leftdigit,false);
//    lc.setDigit(0,3,rightdigit,false);
//
//    while (!digitalRead(switchtwo)) { 
//    }    
//    delay(5);
//  }
//}
